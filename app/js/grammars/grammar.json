{
    "lex": {
        "rules": [
            ["\\s+", "/* skip whitespace */"],
            ["//.*", "/* ignore comments */"],
            ["[0-9]+(?:\\.[0-9]+)?\\b", "return 'NUMBER';"],
            ["println", "return 'PRINT';"],
            ["print", "return 'PRINT';"],
            ["break", "return 'BREAK';"],
            ["\\.", "return 'DOT';"],
            ["\\*", "return '*';"],
            ["\\/", "return '/';"],
            ["-", "return '-';"],
            ["\\+", "return '+';"],
            ["\\^", "return '^';"],
            ["\\(", "return '(';"],
            ["\\)", "return ')';"],
            ["\\{", "return '{';"],
            ["\\}", "return '}';"],
            ["\\[", "return '[';"],
            ["\\]", "return ']';"],
            ["PI\\b", "return 'PI';"],
            ["\\,", "return 'COMMA';"],
            ["E\\b", "return 'E';"],
            ["<-", "return 'ASSIGN';"],
            ["=", "return 'EQUALITY';"],
            ["≠", "return 'NOTEQUAL';"],
            ["≤", "return 'LTE';"],
            ["<", "return 'LT';"],
            ["≥", "return 'GTE';"],
            [">", "return 'GT';"],
            ["(\n|\;)", "return 'TERM';"],
            ["return", "return 'RET';"],
            ["var", "return 'TYPE';"],
            ["true\\b", "return 'TRUE'"],
            ["false\\b", "return 'FALSE'"],
            ["nil\\b", "return 'NULL'"],
            ["if", "return 'IF';"],
            ["else", "return 'ELSE';"],
            ["while", "return 'WHILE';"],
            ["do", "return 'DO';"],
            ["for", "return 'FOR';"],
            ["[A-z][A-z0-9_]*\\+\\+", "return 'INC';"],
            ["[a-zA-Z][a-zA-Z0-9_]*", "return 'VARIABLE';"],
            ["$", "return 'EOF';"],
            ["\n+", "return 'NEWLINE'"]
        ]
    },

    "operators": [
        ["left", "+", "-"],
        ["left", "*", "/"],
        ["left", "^"],
        ["left", "UMINUS"],
        ["nonassoc", "EQUALITY", "NOTEQUAL", "LTE", "GTE"]
    ],

    "bnf": {
        "expressions": [
            [ "stmnt EOF", "return yy.compile($$);" ]
        ],

        "stmnt": [
            [ "", "" ],
            [ "if stmnt", "$$ = ($2 !== undefined) ? [$1].concat($2) : [$1];" ],
            [ "loop stmnt", "$$ = ($2 !== undefined) ? [$1].concat($2) : [$1];" ],
            [ "line stmnt", "$$ = ($2 !== undefined) ? [$1].concat($2) : [$1];" ]
        ],

        "returnable": [
            [ "", "" ],
            [ "answer", "$$ = $1;" ]
        ],

        "answer": [
            [ "cond", "$$ = $1;" ],
            [ "exp", "$$ = $1;" ],
            [ "structure", "$$ = $1;" ]
        ],

        "if": [
            [ "IF ( cond ) block", "$$ = yy.flow.If(@1, @4, $3, $5);" ],
            [ "IF ( cond ) block ELSE if", "$$ = yy.flow.If(@1, @4, $3, $5, $7);" ],
            [ "IF ( cond ) block ELSE block", "$$ = yy.flow.If(@1, @4, $3, $5, $7);" ]
        ],

        "loop": [
            [ "WHILE ( cond ) block", "$$ = yy.flow.While(@1, @5, $3, $5);" ],
            [ "DO block WHILE ( cond ) TERM", "$$ = yy.flow.DoWhile(@1, @7, $2, $5);" ],
            [ "FOR ( decl TERM cond TERM exp ) block", "$$ = yy.flow.For(@1, @8, $3, $5, $7, $9);" ]
        ],

        "block": [
            [ "{ stmnt }", "$$ = yy.stmnt.Block(@1, @3, $2);" ]
        ],

        "decl": [
            [ "TYPE decl", "$$ = $2" ],
            [ "TYPE var", "$$ = new yy.Decl(@1, @2, $2);" ],
            [ "assignable ASSIGN answer", "$$ = yy.exp.Assign(@1, @3, $1, $3);" ]
        ],

        "line": [
            [ "answer TERM", "$$ = yy.stmnt.Line(@1, @2, $1);" ],
            [ "decl TERM", "$$ = yy.stmnt.Line(@1, @2, $1);" ],
            [ "reserved TERM", "$$ = yy.stmnt.Line(@1, @2, $1);" ]
        ],

        "structure": [
            [ "[ elems ]", "$$ = yy.type.Arr(@1, $2);" ]
        ],

        "elems": [
            ["", ""],
            ["exp sep elems", "$$ = ($3 !== undefined) ? [$1].concat($3) : [$1];"]
        ],

        "sep": [
            ["", ""],
            ["COMMA", "$$ = yytext"]
        ],

        "reserved": [
            [ "RET returnable", "$$ = new yy.Return(@1, @2, $2);" ],
            [ "BREAK", "$$ = new yy.Break(@1);" ],
            [ "PRINT ( answer )", "$$ = yy.func.Output(@1, @4, $3, $1);" ]
        ],

        "params": [
            ["", ""],
            [ "exp", "$$ = $1;" ]
        ],

        "assignable": [
            ["var", "$$ = $1;"],
            [ "assignable [ elems ]", "$$ = yy.func.ArrayAccess(@1, @2, $1, $3);" ]
        ],

        "var": [
            [ "VARIABLE", "$$ = yy.exp.Variable(@1, $1);"]
        ],

        "method": [
            ["VARIABLE", "$$ = yytext"]
        ],

        "exp": [
            [ "assignable", "$$ = $1" ],
            [ "NUMBER", "$$ = yy.type.Number(@1,yytext);" ],
            [ "( exp )", "$$ = $2;" ],
            [ "INC", "$$ = yy.exp.Increment(@1, $1);" ],
            [ "exp + exp", "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.Add);" ],
            [ "exp - exp", "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.Subtract);" ],
            [ "exp * exp", "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.Multiply);" ],
            [ "exp / exp", "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.Divide);" ],
            [ "exp ^ exp", "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.Pow);" ],
            [ "E", "$$ = Math.E;" ],
            [ "PI", "$$ = Math.PI;" ],
            [ "assignable DOT method ( params )", "$$ = yy.func.FunctionCall(@1, @6, $1, $3, $5);" ]
        ],

        "cond": [
            [ "exp EQUALITY exp", "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.Equal);" ],
            [ "exp NOTEQUAL exp", "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.Inequal);" ],
            [ "exp LTE exp", "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.LTE);" ],
            [ "exp GTE exp", "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.GTE);" ],
            [ "exp LT exp", "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.LT);" ],
            [ "exp GT exp", "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.GT);" ],
            [ "TRUE", "$$ = yy.type.Boolean(@1, true);"],
            [ "FALSE", "$$ = yy.type.Boolean(@1, false);"]
        ]
    }
};
