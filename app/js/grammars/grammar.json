
{
    "lex": {
        "rules": [
            ["\\s+",                    "/* skip whitespace */"],
            ["//.*",                    "/* ignore comments */"],
            ["[0-9]+(?:\\.[0-9]+)?\\b", "return 'NUMBER';"],
            ["println",                 "return 'PRINT';"],
            ["print",                   "return 'PRINT';"],
	    ["break",                   "return 'BREAK';"],
            ["\\.",                     "return 'DOT';"],
            ["\\*",                     "return '*';"],
            ["\\/",                     "return '/';"],
            ["-",                       "return '-';"],
            ["\\+",                     "return '+';"],
            ["\\^",                     "return '^';"],
            ["\\(",                     "return '(';"],
            ["\\)",                     "return ')';"],
            ["\\{",                     "return '{';"],
            ["\\}",                     "return '}';"],
            ["\\[",                     "return '[';"],
            ["\\]",                     "return ']';"],
            ["PI\\b",                   "return 'PI';"],
            ["\\,",                     "return 'COMMA';"],
            ["E\\b",                    "return 'E';"],
            ["<-",                      "return 'ASSIGN';"],
            ["=",                       "return 'EQUALITY';"],
            ["≠",                       "return 'NOTEQUAL';"],
            ["≤",                       "return 'LTE';"],
            ["<",                       "return 'LT';"],
            ["≥",                       "return 'GTE';"],
            [">",                       "return 'GT';"],
            ["(\n|\;)",                 "return 'TERM';"],
            ["return",                  "return 'RET';"],
            ["var",                     "return 'TYPE';"],
            ["true\\b",                 "return 'TRUE'"],
            ["false\\b",                "return 'FALSE'"],
            ["nil\\b",                  "return 'NULL'"],
            ["if",                      "return 'IF';"],
            ["else",                    "return 'ELSE';"],
            ["while",                   "return 'WHILE';"],
            ["do",                      "return 'DO';"],
            ["for",                     "return 'FOR';"],
            ["[A-z][A-z0-9_]*\\+\\+",   "return 'INC';"],
            ["[a-zA-Z][a-zA-Z0-9_]*",   "return 'VARIABLE';"],
            ["$",                       "return 'EOF';"],
            ["\n+",                     "return 'NEWLINE'"]
        ]
    },

    "operators": [
        ["left", "+", "-"],
        ["left", "*", "/"],
        ["left", "^"],
        ["left", "UMINUS"],
        ["nonassoc", "EQUALITY", "NOTEQUAL", "LTE", "GTE"]
    ],

    "bnf": {
        "expressions" :[
            [ "stmnt EOF", "return yy.compile($$);" ]
        ],

        "stmnt" :[
            [ "",               "" ],
            [ "if stmnt",       "$$ = ($2 !== undefined) ? [$1].concat($2) : [$1];" ],
            [ "loop stmnt",     "$$ = ($2 !== undefined) ? [$1].concat($2) : [$1];" ],
            [ "line stmnt",     "$$ = ($2 !== undefined) ? [$1].concat($2) : [$1];" ]
        ],

        "returnable" :[
	    [ "", "" ],
            [ "answer", "$$ = $1;" ]
        ],

	"answer": [
	    [ "cond",           "$$ = $1;" ],
            [ "exp",            "$$ = $1;" ],
            [ "structure",      "$$ = $1;" ]
	],

        "return": [
            [ "RET returnable", "$$ = new yy.Return(@1, @2, $2);" ],
        ],

        "if" :[
            [ "IF ( cond ) block",                "$$ = new yy.flow.If(@1, @4, $3, $5);" ],
            [ "IF ( cond ) block ELSE if",        "$$ = new yy.flow.If(@1, @4, $3, $5, $7);" ],
            [ "IF ( cond ) block ELSE block",     "$$ = new yy.flow.If(@1, @4, $3, $5, $7);" ]
        ],

        "loop" :[
            [ "WHILE ( cond ) block",                  "$$ = new yy.flow.While(@1, @5, $3, $5);" ],
            [ "DO block WHILE ( cond ) TERM",          "$$ = new yy.flow.DoWhile(@1, @7, $2, $5);" ],
            [ "FOR ( decl TERM cond TERM exp ) block", "$$ = new yy.flow.For(@1, @8, $3, $5, $7, $9);" ]
        ],

        "block" :[
            [ "{ stmnt }", "$$ = new yy.stmnt.Block(@1, @3, $2);" ]
        ],

        "decl" :[
            [ "TYPE decl",                    "$$ = $2" ],
            [ "var ASSIGN answer", "$$ = new yy.exp.Assign(@1, @3, $1, $3);" ]
        ],

        "line": [
            [ "answer TERM",               "$$ = new yy.stmnt.Line(@1, @2, $1);" ],
            [ "decl TERM",                 "$$ = new yy.stmnt.Line(@1, @2, $1);" ],
            [ "func TERM",                 "$$ = new yy.stmnt.Line(@1, @2, $1);" ],
            [ "return TERM",               "$$ = new yy.stmnt.Line(@1, @2, $1);" ],
	    [ "BREAK TERM",                "$$ = new yy.Break(@1, @2);" ]
        ],

        'structure' : [
            [ "[ elems ]",      "$$ = new yy.type.Arr(@1, $2);" ]
        ],

        'elems': [
            ["", ""],
            ["exp sep elems", "$$ = ($3 !== undefined) ? [$1].concat($3) : [$1];"]
        ],

        'sep': [
            ["", ""],
            ["COMMA", "$$ = yytext"]
        ],

        'func': [
            [ "PRINT ( answer )",        "$$ = new yy.func.Output(@1, @4, $3, $1);" ]
        ],

        "params" :[
            ["", ""],
            [ "exp", "$$ = $1;" ]
        ],

        'var' : [
            [ "VARIABLE",   "$$ = new yy.exp.Variable(@1, $1);;"]
        ],

        'method': [
            ["VARIABLE", "$$ = yytext"]
        ],

        "exp" :[
            [ "var",        "$$ = $1"],
            [ "NUMBER",     "$$ = new yy.type.Number(@1,yytext);" ],
            [ "( exp )",    "$$ = $2;" ],
            [ "INC",        "$$ = new yy.exp.Increment(@1, $1);" ],
            [ "exp + exp",  "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.Add);" ],
            [ "exp - exp",  "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.Subtract);" ],
            [ "exp * exp",  "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.Multiply);" ],
            [ "exp / exp",  "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.Divide);" ],
            [ "exp ^ exp",  "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.Pow);" ],
            [ "E",          "$$ = Math.E;" ],
            [ "PI",         "$$ = Math.PI;" ],
            [ "var [ elems ]",  "$$ = new yy.func.ArrayAccess(@1, @2, $1, $3);" ],
            [ "var DOT method ( params )", "$$ = new yy.func.FunctionCall(@1, @6, $1, $3, $5);" ]
        ],

        "cond" :[
            [ "exp EQUALITY exp", "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.Equal);" ],
            [ "exp NOTEQUAL exp", "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.Inequal);" ],
            [ "exp LTE exp",      "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.LTE);" ],
            [ "exp GTE exp",      "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.GTE);" ],
            [ "exp LT exp",       "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.LT);" ],
            [ "exp GT exp",       "$$ = new yy.exp.Expression(@1, @3, $1, $3, yy.exp.GT);" ],
            [ "TRUE",             "$$ = new yy.type.Boolean(@1, true);"],
            [ "FALSE",            "$$ = new yy.type.Boolean(@1, false);"]
        ]
    }
};
