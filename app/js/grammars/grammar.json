{
    "lex": {
        "rules": [
            ["\\s+",                    "/* skip whitespace */"],
            ["//.*",                    "/* ignore comments */"],
            ["[0-9]+(?:\\.[0-9]+)?\\b", "return 'NUMBER';"],
            ["print",                   "return 'PRINT';"],
            ["\\*",                     "return '*';"],
            ["\\/",                     "return '/';"],
            ["-",                       "return '-';"],
            ["\\+",                     "return '+';"],
            ["\\^",                     "return '^';"],
            ["\\(",                     "return '(';"],
            ["\\)",                     "return ')';"],
            ["\\{",                     "return '{';"],
            ["\\}",                     "return '}';"],
            ["\\[.*?\\]",               "return 'ARRAY';"],
            ["\\]",                     "return ']';"],
            ["PI\\b",                   "return 'PI';"],
            ["E\\b",                    "return 'E';"],
            ["<-",                      "return 'ASSIGN';"],
            ["=",                       "return 'EQUALITY';"],
            ["≠",                       "return 'NOTEQUAL';"],
            ["≤",                       "return 'LTE';"],
            ["≥",                       "return 'GTE';"],
            ["(\n|\;)",                 "return 'TERM';"],
            ["return",                  "return 'RET';"],
            ["var",                     "return 'TYPE';"],
            ["true\\b",                 "return 'TRUE'"],
            ["false\\b",                "return 'FALSE'"],
            ["nil\\b",                  "return 'NULL'"],
            ["if",                      "return 'IF';"],
            ["else",                    "return 'ELSE';"],
            ["[a-zA-Z][a-zA-Z0-9_]*",   "return 'VARIABLE';"],
            ["$",                       "return 'EOF';"],
            ["\n+",                     "return 'NEWLINE'"]
        ]
    },

    "operators": [
        ["left", "+", "-"],
        ["left", "*", "/"],
        ["left", "^"],
        ["left", "UMINUS"]
        ["nonassoc", "EQUALITY", "NOTEQUAL", "LTE", "GTE"]
    ],

    "bnf": {
        "expressions" :[
            [ "stmnt EOF", "return $1;" ]
        ],

        "stmnt" :[
            [ "",               "" ],
            [ "if",             "$$ = $1;" ],
            [ "line stmnt",     "$$ = ($2 !== undefined) ? $2 : $1;" ]
        ],

        "returnable" :[
            [ "RET returnable", "$$ = $2;" ],
            [ "cond",           "$$ = $1;" ],
            [ "exp",            "$$ = $1;" ]
        ],

        "if" :[
            [ "IF ( cond ) { stmnt }",                "$$ = new yy.If(@7.first_line, @7.first_column, $3, $6)._value;" ],
            [ "IF ( cond ) { stmnt } ELSE if",        "$$ = new yy.If(@9.first_line, @9.first_column, $3, $6, $9)._value;" ],
            [ "IF ( cond ) { stmnt } ELSE { stmnt }", "$$ = new yy.If(@11.first_line, @11.first_column, $3, $6, $10)._value;" ]
        ],

        "decl" :[
            [ "TYPE decl",             "$$ = $2" ],
            [ "exp ASSIGN returnable", "$$ = new yy.Assign(@3.first_line, @3.first_column, $1, $3);" ]
        ],

        "line": [
            [ "returnable TERM",           "$$ = new yy.Line(@2.first_line, @2.first_column, $1);" ],
            [ "decl TERM",                 "$$ = new yy.Line(@2.first_line, @2.first_column, $1);" ],
            [ "PRINT ( returnable ) TERM", "$$ = new yy.Output(@5.first_line ,@5.first_column, $3, $1);" ]
        ],

        "exp" :[
            [ "VARIABLE",   "$$ = new yy.Variable(@1.first_line, @1.first_column, yytext);"],
            [ "NUMBER",     "$$ = new yy.Number(@1.first_line, @1.first_column, yytext);" ],
	    [ "( exp )",    "$$ = $2;" ],
            [ "exp + exp",  "$$ = new yy.Expression(@3.first_line, @3.first_column, $1, $3, '+');" ],
            [ "exp - exp",  "$$ = new yy.Expression(@3.first_line, @3.first_column, $1, $3, '-');" ],
            [ "exp * exp",  "$$ = new yy.Expression(@3.first_line, @3.first_column, $1, $3, '*');" ],
            [ "exp / exp",  "$$ = new yy.Expression(@3.first_line, @3.first_column, $1, $3, '/');" ],
            [ "exp ^ exp",  "$$ = new yy.Expression(@3.first_line, @3.first_column, $1, $3, '^');" ],
            [ "E",          "$$ = Math.E;" ],
            [ "PI",         "$$ = Math.PI;" ],
            [ "ARRAY",      "$$ = new yy.Arr(@1.first_line, @1.first_column, $1)" ]
        ],

        "cond" :[
            [ "exp EQUALITY exp", "$$ = new yy.Expression(@3.first_line, @3.first_column, $1, $3, '=');" ],
            [ "exp NOTEQUAL exp", "$$ = new yy.Expression(@3.first_line, @3.first_column, $1, $3, '≠');" ],
            [ "exp LTE exp",      "$$ = new yy.Expression(@3.first_line, @3.first_column, $1, $3, '≤');" ],
            [ "exp GTE exp",      "$$ = new yy.Expression(@3.first_line, @3.first_column, $1, $3, '≥');" ],
            [ "TRUE",             "$$ = new yy.Boolean(@1.first_line, @1.first_column, true);"],
            [ "FALSE",            "$$ = new yy.Boolean(@1.first_line, @1.first_column, false);"]
        ]
    }
};
